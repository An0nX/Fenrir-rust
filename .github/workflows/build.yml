# fenrir-rust/.github/workflows/build.yml
name: Build Fenrir Rust

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS_MUSL: "-C target-feature=+crt-static"

jobs:
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ---- Linux x86_64 ----
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fenrir-rust-x86_64-linux-gnu
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: fenrir-rust-x86_64-linux-musl
            use_cross: true
          # ---- macOS (Intel & Apple Silicon) ----
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fenrir-rust-x86_64-macos
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin # Keep macOS ARM64
            artifact_name: fenrir-rust-aarch64-macos
            use_cross: false
          # ---- Windows x86_64 ----
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fenrir-rust-x86_64-windows.exe
            use_cross: false
          # ---- Удаленные сборки aarch64 ----
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: fenrir-rust-aarch64-linux-gnu
          #   use_cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   artifact_name: fenrir-rust-aarch64-linux-musl
          #   use_cross: true
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   artifact_name: fenrir-rust-aarch64-windows.exe
          #   use_cross: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # Установка зависимостей кросс-компиляции теперь нужна только для musl x86_64
    - name: Install cross-compilation prerequisites (Linux)
      if: runner.os == 'Linux' && matrix.use_cross == true && contains(matrix.target, 'musl')
      run: |
        sudo apt-get update -y
        sudo apt-get install -y musl-tools

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Set Rustflags for Static Linking (MUSL)
      if: contains(matrix.target, 'musl')
      shell: bash
      run: |
        echo "Setting RUSTFLAGS=${RUSTFLAGS_MUSL}"
        echo "RUSTFLAGS=${RUSTFLAGS_MUSL}" >> $GITHUB_ENV

    - name: Update dependencies
      run: cargo update --verbose

    - name: Build binary
      run: cargo build --target ${{ matrix.target }} --release --verbose

    - name: Lint code (Clippy)
      run: cargo clippy --target ${{ matrix.target }} --release -- -D warnings

    - name: Test code
      run: cargo test --target ${{ matrix.target }} --release --verbose

    - name: Prepare artifact
      shell: bash
      run: |
        ARTIFACT_DIR=artifact
        mkdir -p $ARTIFACT_DIR
        BINARY_NAME=${{ matrix.artifact_name }}
        SOURCE_DIR=target/${{ matrix.target }}/release
        EXE_NAME=fenrir-rust
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp $SOURCE_DIR/$EXE_NAME.exe $ARTIFACT_DIR/$BINARY_NAME
        else
          cp $SOURCE_DIR/$EXE_NAME $ARTIFACT_DIR/$BINARY_NAME
        fi
        cp README.md $ARTIFACT_DIR/
        if [ -f LICENSE ]; then cp LICENSE $ARTIFACT_DIR/; fi
        cp hash-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || echo "hash-iocs.txt not found, skipping."
        cp string-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || echo "string-iocs.txt not found, skipping."
        cp filename-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || echo "filename-iocs.txt not found, skipping."
        cp c2-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || echo "c2-iocs.txt not found, skipping."
        echo "--- Artifact Contents ---"
        ls -l $ARTIFACT_DIR

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifact/
