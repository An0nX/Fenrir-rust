# fenrir-rust/.github/workflows/build.yml
name: Build and Release Fenrir Rust

on:
  push:
    branches: [ "main", "master" ]
    tags:       # Добавляем реакцию на теги
      - 'v*.*.*'
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS_MUSL: "-C target-feature=+crt-static"

jobs:
  # --- Задача сборки (выполняется всегда) ---
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fenrir-rust-x86_64-linux-gnu
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: fenrir-rust-x86_64-linux-musl
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fenrir-rust-x86_64-macos
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fenrir-rust-aarch64-macos
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fenrir-rust-x86_64-windows.exe
            use_cross: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation prerequisites (Linux MUSL)
      if: runner.os == 'Linux' && matrix.use_cross == true && contains(matrix.target, 'musl')
      run: |
        sudo apt-get update -y
        sudo apt-get install -y musl-tools

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Set Rustflags for Static Linking (MUSL)
      if: contains(matrix.target, 'musl')
      shell: bash
      run: |
        echo "Setting RUSTFLAGS=${RUSTFLAGS_MUSL}"
        echo "RUSTFLAGS=${RUSTFLAGS_MUSL}" >> $GITHUB_ENV

    - name: Update dependencies
      run: cargo update --verbose

    - name: Build binary
      run: cargo build --target ${{ matrix.target }} --release --verbose

    - name: Lint code (Clippy)
      run: cargo clippy --target ${{ matrix.target }} --release -- -D warnings

    - name: Test code
      run: cargo test --target ${{ matrix.target }} --release --verbose

    - name: Prepare artifact
      shell: bash
      run: |
        ARTIFACT_DIR=artifact
        mkdir -p $ARTIFACT_DIR
        BINARY_NAME=${{ matrix.artifact_name }}
        SOURCE_DIR=target/${{ matrix.target }}/release
        EXE_NAME=fenrir-rust
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp $SOURCE_DIR/$EXE_NAME.exe $ARTIFACT_DIR/$BINARY_NAME
        else
          cp $SOURCE_DIR/$EXE_NAME $ARTIFACT_DIR/$BINARY_NAME
        fi
        # Копируем вспомогательные файлы ТОЛЬКО если они существуют
        cp README.md $ARTIFACT_DIR/ 2>/dev/null || true
        if [ -f LICENSE ]; then cp LICENSE $ARTIFACT_DIR/; fi
        cp hash-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || true
        cp string-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || true
        cp filename-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || true
        cp c2-iocs.txt $ARTIFACT_DIR/ 2>/dev/null || true
        echo "--- Artifact Contents for ${{ matrix.artifact_name }} ---"
        ls -l $ARTIFACT_DIR

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }} # Имя артефакта уникально для каждой сборки
        path: artifact/

  # --- Задача создания релиза (выполняется только для тегов) ---
  create_release:
    name: Create GitHub Release
    # Запускаем только если событие - пуш тега
    if: startsWith(github.ref, 'refs/tags/')
    # Зависит от успешного завершения ВСЕХ сборок в матрице 'build'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Разрешение на создание релиза и загрузку ассетов

    steps:
    # Чекаут здесь не нужен, так как мы используем артефакты из задачи 'build'

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      # Скачиваем ВСЕ артефакты из ТЕКУЩЕГО запуска воркфлоу
      with:
        path: artifacts/ # Все артефакты будут в подпапках artifacts/<artifact_name>/

    - name: List downloaded artifacts
      run: ls -R artifacts/

    - name: Prepare release assets and checksums
      id: prepare_assets
      shell: bash
      run: |
        RELEASE_DIR="release-assets"
        CHECKSUM_FILE="checksums.sha256"
        mkdir -p $RELEASE_DIR
        echo "--- Moving assets ---"
        # Перемещаем все файлы из подпапок артефактов в папку релиза
        find artifacts/ -mindepth 2 -type f -print -exec mv {} $RELEASE_DIR/ \;

        echo "--- Generating Checksums ---"
        cd $RELEASE_DIR
        sha256sum * > $CHECKSUM_FILE 2>/dev/null || echo "No files found to checksum."

        echo "--- Checksum File ---"
        if [ -f $CHECKSUM_FILE ]; then
           cat $CHECKSUM_FILE
           echo "checksum_content<<EOF" >> $GITHUB_OUTPUT
           cat $CHECKSUM_FILE >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
        else
           echo "checksum_content=No artifacts built or checksummed." >> $GITHUB_OUTPUT
        fi
        cd ..

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }} # Используем имя тега из события
        name: Fenrir Rust ${{ github.ref_name }} # Название релиза
        body: |
          Fenrir Rust release based on tag ${{ github.ref_name }}.

          **SHA256 Checksums:**
          ```
          ${{ steps.prepare_assets.outputs.checksum_content }}
          ```
        draft: false
        prerelease: false
        files: |
          release-assets/*
