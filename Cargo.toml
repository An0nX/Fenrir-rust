# fenrir-rust/Cargo.toml
[package]
name = "fenrir-rust"
version = "0.9.0" # Match original script version
edition = "2025"
authors = ["Original: Florian Roth", "Rewrite: AI Assistant"]
description = "Secure Rust rewrite of the Fenrir Bash IOC Scanner"
license = "MIT" # Choose appropriate license

[dependencies]
# Command Line Interface
clap = { version = "4.4", features = ["derive", "env"] }

# Configuration - Using environment variables primarily for simplicity matching script
# config = { version = "0.13", features = ["toml"] } # Alternative: file-based config
# serde = { version = "1.0", features = ["derive"] } # Needed for config crate

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "json"] }
tracing-appender = "0.2" # For file logging rotation
# syslog = { version = "6.0", optional = true } # Optional syslog integration

# Filesystem & IO
walkdir = "2.4"
regex = "1.10"
lazy_static = "1.4" # For global regex or config defaults

# Hashing
md5 = "0.7"
sha1 = { version = "0.10", features = ["oid"] } # oid feature might not be needed
sha2 = "0.10"
hex = "0.4" # For converting hash digests to strings
digest = "0.10" # Generic trait for hashers

# String Matching
aho-corasick = "1.1"

# Compression Libraries
flate2 = "1.0" # Gzip
bzip2 = "0.4"  # Bz2
# zip = "0.6" # Optional: Zip support if needed beyond gz/bz2

# Network & System Info (for C2 checks and SysInfo)
# Using std::process::Command for lsof initially as direct replacement is complex
# sysinfo = "0.30" # Alternative for system info, less portable for network connections than lsof

# Error Handling
thiserror = "1.0"

# Concurrency
rayon = "1.8"

# Time
chrono = "0.4"

[features]
# default = ["syslog_logging"] # Uncomment to enable syslog by default
# syslog_logging = ["dep:syslog"] # Feature flag for syslog

# Profile for release builds - optimize for size and speed, enable static linking where possible
[profile.release]
lto = true           # Link Time Optimization
codegen-units = 1    # Maximize optimization opportunities
panic = "abort"      # Abort on panic for smaller binary size
strip = true         # Strip symbols from binary
opt-level = 3        # Optimize for speed (though 'z' optimizes for size)

# Attempt static linking for linux-musl target
[target.x86_64-unknown-linux-musl.dependencies]
# No specific overrides needed typically, relies on MUSL toolchain

[target.aarch64-unknown-linux-musl.dependencies]
# No specific overrides needed typically, relies on MUSL toolchain

# Windows MSVC doesn't easily support full static linking of CRT, but we try
[target.x86_64-pc-windows-msvc.rustflags]
# rustflags = ["-C", "target-feature=+crt-static"] # Enables static CRT linking

[target.aarch64-pc-windows-msvc.rustflags]
# rustflags = ["-C", "target-feature=+crt-static"] # Enables static CRT linking

# macOS does not support fully static binaries easily
